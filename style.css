:root {
  --primary-color: #6C63FF; /* Soft Purple */
  --secondary-color: #FF6B6B; /* Coral */
  --background-color: #F8F9FA; /* Light Gray */
  --text-color: #333333; /* Dark Gray */
  --accent-color: #4ECDC4; /* Soft Teal */
  --shadow-color: rgba(108, 99, 255, 0.3); /* Soft Purple Shadow */
}

body {
  font-family: 'Poppins', sans-serif;
  margin: 0;
  padding: 0;
  background-color: var(--background-color);
  color: var(--text-color);
  overflow-x: hidden;
}

.container {
  width: 90%;
  max-width: 1200px;
  margin: 0 auto;
}

/* Hero Section */
.hero {
  height: 100vh;
  background: linear-gradient(135deg, var(--primary-color), var(--accent-color));
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  text-align: center;
  position: relative;
  overflow: hidden;
  padding: 20px;
  color: white;
}

.hero h1 {
  font-size: 4rem;
  margin: 0;
  animation: fadeIn 2s ease-in-out, float 3s infinite ease-in-out;
}

.tagline {
  font-size: 1.5rem;
  margin: 10px 0 20px;
  animation: fadeIn 2.5s ease-in-out;
}

.cta-buttons {
  display: flex;
  gap: 20px;
  margin-top: 20px;
}

.btn {
  padding: 10px 20px;
  border-radius: 25px;
  text-decoration: none;
  font-weight: 600;
  transition: transform 0.3s ease, box-shadow 0.3s ease;
  display: flex;
  align-items: center;
  gap: 10px;
}

.btn.primary {
  background: var(--secondary-color);
  color: white;
}

.btn.secondary {
  background: transparent;
  border: 2px solid white;
  color: white;
}

.btn:hover {
  transform: translateY(-5px);
  box-shadow: 0 10px 20px var(--shadow-color);
}

/* Features Section */
.features {
  padding: 60px 0;
  background: var(--background-color);
}

.features h2 {
  text-align: center;
  font-size: 2.5rem;
  margin-bottom: 40px;
  color: var(--primary-color);
}

.feature-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 20px;
}

.feature-card {
  background: white;
  padding: 20px;
  border-radius: 10px;
  text-align: center;
  transition: transform 0.3s ease, box-shadow 0.3s ease;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.feature-card:hover {
  transform: translateY(-10px);
  box-shadow: 0 10px 20px var(--shadow-color);
}

.feature-card i {
  font-size: 2.5rem;
  margin-bottom: 10px;
  color: var(--primary-color);
}

.feature-card h3 {
  font-size: 1.5rem;
  margin: 10px 0;
  color: var(--primary-color);
}

.feature-card p {
  font-size: 1rem;
  color: #666;
}

/* Download Section */
.download {
  padding: 60px 0;
  text-align: center;
  background: linear-gradient(135deg, var(--accent-color), var(--primary-color));
  color: white;
}

.download h2 {
  font-size: 2.5rem;
  margin-bottom: 20px;
}

.download-buttons {
  display: flex;
  gap: 20px;
  justify-content: center;
  flex-wrap: wrap;
}

/* Support Section */
.support {
  padding: 60px 0;
  background: var(--background-color);
  text-align: center;
}

.support h2 {
  font-size: 2.5rem;
  margin-bottom: 20px;
  color: var(--primary-color);
}

.support-links {
  display: flex;
  gap: 20px;
  justify-content: center;
  flex-wrap: wrap;
}

/* Footer */
footer {
  background: var(--primary-color);
  color: white;
  text-align: center;
  padding: 20px 0;
}

footer a {
  color: var(--secondary-color);
  text-decoration: none;
}

footer a:hover {
  text-decoration: underline;
}

/* Animations */
@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}

@keyframes float {
  0%, 100% { transform: translateY(0); }
  50% { transform: translateY(-10px); }
}

/* Smooth scrolling for anchor links */
document.querySelectorAll('a[href^="#"]').forEach(anchor => {
  anchor.addEventListener('click', function (e) {
    e.preventDefault();
    const targetId = this.getAttribute('href');
    const targetSection = document.querySelector(targetId);
    if (targetSection) {
      targetSection.scrollIntoView({
        behavior: 'smooth'
      });
    }
  });
});

/* Fade-in animations for sections */
const sections = document.querySelectorAll('section');

const observer = new IntersectionObserver((entries) => {
  entries.forEach(entry => {
    if (entry.isIntersecting) {
      entry.target.classList.add('visible');
    }
  });
}, { threshold: 0.1 });

sections.forEach(section => {
  observer.observe(section);
});
